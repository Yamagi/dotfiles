# Global settings
# ---------------

# Allow passthrough of \ePtmux escape sequences to the
# underlying terminal. This was the default before tmux
# 3.3 and is used by several applications. Vim with the
# terminus plugin is a prominent example.
set -g allow-passthrough on

# Disallow renaming windows by sending escape sequences.
# Instead autorename them based upon the current process.
set -wg allow-rename off
set -wg automatic-rename on
set -wg automatic-rename-format "#{?pane_in_mode,[tmux],#{pane_current_command}}#{?pane_dead,[dead],}"

# Number windows starting from 1. While 0 is nicer from
# a programmers standpoint, the keyboard layout makes 1
# a more natural choice.
set -sg base-index 1

# Somewhat faster escape sequences. Since 3.1 the standard
# was 500 ms, since 3.5 it's 10 ms. We set 10 ms explicitly,
# because we might use the config with older versions.
set -sg escape-time 10

# Support extended keys. Always enable the support. If the
# process running in the pane requested nothing, behave like
# modifyOtherKeys mode 1 was requested. This changes keys
# without a well-known escape sequence to use the extended
# format. This won't break programs without support for the
# extended format, they will ignore the sequences or treat
# them as unsupported. It might help programs which support
# the extended format and are too dump to request it from
# tmux, though. Force the format to the CSI U sequences
# because that's the standard these days.
set -sg extended-keys always
set -sg extended-keys-format csi-u

# Report focus events to the clients, when the pane changes
# or the terminal sends us one. Required for Vims autoread
# functionality.
set -g focus-events on

# Keep more line in the back buffer.
set -g history-limit 65536

# Monitor activity.
set -wg monitor-activity on
set -wg monitor-bell on
set -g visual-bell on

# Mouse mode.
set -g mouse on

# Renumber existing sessions after a session was created or closed.
set-hook -g session-created "run ~/.config/tmux/scripts/renumber-sessions.sh"
set-hook -g session-closed  "run ~/.config/tmux/scripts/renumber-sessions.sh"

# Renumber existing windows after a window was created or closed.
set -g renumber-windows on

# Time out the prefix after 2.5 seconds.
set -g prefix-timeout 2500

# Allow setting the system clipboard with OSC52 sequences.
# The underlying terminal must support them, of course.
set -g set-clipboard on

# Environment variables transferred from the parent
# environment at reattach or when an environment update
# is requested.
set -g update-environment "SSH_AUTH_SOCK DISPLAY WAYLAND_DISPLAY XAUTHORITY"

# Aggressive window resizing.
set -wg aggressive-resize on
set -wg window-size latest

# ---------------------------------------------- #

# Terminal features
# -----------------

# Enable Truecolor support.
set -as terminal-features ",*:RGB"

# Enable colored undercurls. This is somewhat shaky,
# because not all common terminals support them and
# there's no reliable way to detect if the current
# terminal does. Since we don't use undercurls often,
# it shouldn't be a big problem on xterm variants.
# Alacritty always supports them.
set -as terminal-features ",xterm-256color:usstyle"
set -as terminal-features ",alacritty:usstyle"

# Several older systems and FreeBSD in general think
# that rxvt-unicode hasn't support for italics and
# map them to reverse video. Hack around that by
# forcing the correct escape sequences.
set -as terminal-overrides ",rxvt-unicode*:sitm=\e[3m,ritm=\e[23m"

# Enforce 256 color support.
set -sg default-terminal "tmux-256color"

# ---------------------------------------------- #

# Style
# -----

# Messages.
set -g message-style 'fg=colour188,bg=colour233'
set -g message-command-style 'fg=colour188,bg=colour233'

# Panes.
set -g pane-border-style 'fg=colour249,bg=colour233'
set -g pane-active-border-style 'fg=colour249,bg=colour233'

# Statusbar.
set -g status-style 'fg=colour239,bg=colour249'

# Windows.
set -wg window-style 'fg=colour188,bg=colour233'
set -wg window-status-activity-style 'fg=colour239,bold,bg=colour249'
set -wg window-status-bell-style 'fg=colour239,bold,bg=colour249'
set -wg window-status-current-style 'fg=colour188,bold,bg=colour24'

# ---------------------------------------------- #

# Statusbar
# ---------

set -g status-interval 1
set -g status-justify left
set -g status-left '#(/usr/bin/whoami)@#h | #S | '
set -g status-left-length 40
set -g status-right ' %a %d/%m/%y %H:%M:%S'
set -g status-right-length 25
set -wg window-status-current-format '#I:#W'
set -wg window-status-format '#I:#W'
set -wg window-status-separator ' | '

# ---------------------------------------------- #

# Bindings
# --------

# Prefix key like in screen(1).
set -g prefix ^a

# Also keep the tmux standard prefix key.
set -g prefix2 ^b

# vi keybindings.
set -wg mode-keys vi
set -g status-keys vi

# Don't change the layout on space.
unbind-key Space

# Don't suspend the tmux client on Prefix<C-z>. Since I'm using tmux
# as kind of shell in my terminals this is more than annoying.
unbind-key C-z

# C-a a sends to nested tmux.
bind-key -N Prefix a send-prefix

# When in copy-mode, use ( and ) to jump between past prompts.
# Requires the prompt to print the OSC 133 escape sequence.
bind -T copy-mode-vi ) send-keys -X next-prompt
bind -T copy-mode-vi ( send-keys -X previous-prompt

# Quick window switch on Meta-1 to Meta-9.
bind-key -N "Switch to window 1" -n M-1 select-window -t :=1
bind-key -N "Switch to window 2" -n M-2 select-window -t :=2
bind-key -N "Switch to window 3" -n M-3 select-window -t :=3
bind-key -N "Switch to window 4" -n M-4 select-window -t :=4
bind-key -N "Switch to window 5" -n M-5 select-window -t :=5
bind-key -N "Switch to window 6" -n M-6 select-window -t :=6
bind-key -N "Switch to window 7" -n M-7 select-window -t :=7
bind-key -N "Switch to window 8" -n M-8 select-window -t :=8
bind-key -N "Switch to window 9" -n M-9 select-window -t :=9

# Nested mode on Meta-z. When in nested mode, the status bar of the
# outer tmux is hidden and all keys are forwarded to the inner tmux.
# Only one level of nesting is supported. The idea was stolen from
# https://willhbr.net/2024/03/06/tmux-conf-with-commentary/
bind -N "Toggle nested mode" -n M-z {
	set status
	set key-table nested
	set prefix None
}
bind -N "Toggle nested mode" -T nested M-z {
	set status
	set key-table root
	set prefix C-a
}

# A scratch session as popup window on M-s.
bind-key -N "Toggle scratch session popup" -n M-s display-popup -E \
		"~/.config/tmux/scripts/scratch-popup.sh"
bind-key -N "Toggle scratch session popup" -T popup M-s detach
bind-key -N "Enter copy mode" -T popup WheelUpPane if-shell -F \
		"#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } \
		{ copy-mode -e }

# A popup menu with the most common operations on M-q. Rarely used,
# but sometimes rather helpful.
bind-key -N "Quick action chooser" -n M-q display-menu -x C -y C \
    "New Session"                        S "command-prompt -p \"New Session:\" \"new-session -A -s '%%'\"" \
    "Kill Session"                       x "kill-session" \
    "Kill Other Session(s)"              X "kill-session -a" \
    "" \
    "New Window"                         c "new-window" \
    "Kill Window"                        k "killw"  \
    "Choose Window"                      w "choose-window" \
    "Previous Window"                    ðŸ¡  "previous-window" \
    "Next Window"                        ðŸ¡¢ "next-window" \
    "Swap Window Right"                  â†‘ "swap-window -t -1" \
    "Swap Window Left"                   â†“ "swap-window -t +1" \
    "Horizontal Split"                   v "split-window -h" \
    "Vertical Split"                     s "split-window -v"  \
    "" \
    "Layout Horizontal"                  h "select-layout even-horizontal"  \
    "Layout Vertical"                    k "select-layout even-horizontal"  \
    "" \
    "Swap Pane Up"                       < "swap-pane -U" \
    "Swap Pane Down"                     > "swap-pane -D" \
    "Break Pane"                         t "break-pane" \
    "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# ---------------------------------------------- #

# vim<->tmux-Navigator
# --------------------

# Requires https://github.com/christoomey/vim-tmux-navigator in Vim.
# It must be configured to use the key sequences defined below.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -N "Switch to left pane"  -n 'M-Left'  if-shell "$is_vim" \
		'send-keys M-h'  'select-pane -L'
bind-key -N "Switch to left pane"  -n 'M-h'     if-shell "$is_vim" \
		'send-keys M-h'  'select-pane -L'
bind-key -N "Switch to lower pane" -n 'M-Down'  if-shell "$is_vim" \
		'send-keys M-j'  'select-pane -D'
bind-key -N "Switch to lower pane" -n 'M-j'     if-shell "$is_vim" \
		'send-keys M-j'  'select-pane -D'
bind-key -N "Switch to upper pane" -n 'M-Up'    if-shell "$is_vim" \
		'send-keys M-k'  'select-pane -U'
bind-key -N "Switch to upper pane" -n 'M-k'     if-shell "$is_vim" \
		'send-keys M-k'  'select-pane -U'
bind-key -N "Switch to right pane" -n 'M-Right' if-shell "$is_vim" \
		'send-keys M-l'  'select-pane -R'
bind-key -N "Switch to right pane" -n 'M-l'     if-shell "$is_vim" \
		'send-keys M-l'  'select-pane -R'

bind-key -N "Switch to left pane"  -T nested 'M-Left'  'send-keys M-h'
bind-key -N "Switch to left pane"  -T nested 'M-h'     'send-keys M-h'
bind-key -N "Switch to lower pane" -T nested 'M-Down'  'send-keys M-j'
bind-key -N "Switch to lower pane" -T nested 'M-j'     'send-keys M-j'
bind-key -N "Switch to upper pane" -T nested 'M-Up'    'send-keys M-k'
bind-key -N "Switch to upper pane" -T nested 'M-k'     'send-keys M-k'
bind-key -N "Switch to right pane" -T nested 'M-Right' 'send-keys M-l'
bind-key -N "Switch to right pane" -T nested 'M-l'     'send-keys M-l'

bind-key -N "Switch to left pane"  -T copy-mode-vi 'M-Left'  select-pane -L
bind-key -N "Switch to left pane"  -T copy-mode-vi 'M-h'     select-pane -L
bind-key -N "Switch to lower pane" -T copy-mode-vi 'M-Down'  select-pane -D
bind-key -N "Switch to lower pane" -T copy-mode-vi 'M-j'     select-pane -D
bind-key -N "Switch to upper pane" -T copy-mode-vi 'M-Up'    select-pane -U
bind-key -N "Switch to upper pane" -T copy-mode-vi 'M-k'     select-pane -U
bind-key -N "Switch to right pane" -T copy-mode-vi 'M-Right' select-pane -R
bind-key -N "Switch to right pane" -T copy-mode-vi 'M-l'     select-pane -R
